#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var url = require( 'url' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var defaults = require( './defaults.json' );
var request = require( './../lib' );


// VARIABLES //

var token;
var args;
var keys;
var uri;
var len;
var key;
var qs;
var i;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 0 );
}


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.version );
	return;
}


// OPTIONS //

opts = defaults;

// Parse the URI and extract any query string parameters...
if ( args._.length ) {
	uri = args._[ 0 ];
} else {
	uri = args.uri;
}
uri = url.parse( uri, true );

qs = uri.query;
keys = Object.keys( qs );
len = keys.length;
for ( i = 0; i < len; i++ ) {
	key = keys[ i ];
	opts.qs[ key ] = qs[ key ];
}
opts.uri = uri;

// Set the authorization token...
if ( args.token ) {
	token = args.token;
}
else if ( process.env.GITHUB_TOKEN ) {
	token = process.env.GITHUB_TOKEN;
}
if ( token ) {
	opts.headers.Authorization = 'token ' + token;
}
// If a special media type has been provided, set the `Accept` header...
if ( args.accept ) {
	opts.headers.Accept = args.accept;
}
// Option to query for all paginated results:
opts.all = args.all;


// REQUEST //

request( opts, onResponse );

/**
* FUNCTION: onResponse( error, data )
*	Callback invoked upon receiving a request response.
*
* @private
* @param {Error|Null} error - error object
* @param {Array[]} data - response data
* @returns {Void}
*/
function onResponse( error, data ) {
	if ( error ) {
		throw error;
	}
	process.stdout.write( JSON.stringify( data ) );
}
