#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' ),
	path = require( 'path' ),
	url = require( 'url' ),
	parseArgs = require( 'minimist' ),
	opts = require( './opts.json' );


// INIT //

process.stdout.on( 'error', process.exit );


// ARGUMENTS //

var args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

function onClose() {
	process.exit( 1 );
}

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( require( './../package.json' ).version );
	return;
}


// REQUEST //

function onResponse( error, json ) {
	if ( error ) {
		console.error( error );
		return;
	}
	process.stdout.write( JSON.stringify( json ) );
}
var token,
	keys,
	uri,
	len,
	key,
	qs,
	i;

opts = require( './defaults.json' );

// Parse the URI and extract any query string parameters...
if ( args._.length ) {
	uri = args._[ 0 ];
} else {
	uri = args.uri;
}
uri = url.parse( uri, true );

qs = uri.query;
keys = Object.keys( qs );
len = keys.length;
for ( i = 0; i < len; i++ ) {
	key = keys[ i ];
	opts.qs[ key ] = qs[ key ];
}
opts.uri = uri;

// Set the authorization token...
if ( args.token ) {
	token = args.token;
}
else if ( process.env.GITHUB_TOKEN ) {
	token = process.env.GITHUB_TOKEN;
}
if ( token ) {
	opts.headers.Authorization = 'token ' + token;
}
// If a special media type has been provided, set the `Accept` header...
if ( args.accept ) {
	opts.headers.Accept = args.accept;
}
// Option to query for all paginated results:
opts.all = args.all;

// Option for polling the Github API...
if ( args.interval ) {
	opts.interval = parseFloat( args.interval );
}

// Make the request(s):
require( './../lib' )( opts, onResponse );
