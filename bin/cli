#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' ),
	path = require( 'path' ),
	url = require( 'url' ),
	parseArgs = require( 'minimist' ),
	opts = require( './opts.json' );


// VARIABLES //

var SIGTERM = 128 + 15,
	SIGINT = 128 + 2,
	SIGHUP = 128 + 1,
	WAIT = 2000, // 2 seconds
	ID;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 1 );
}

/**
* FUNCTION: onResponse( error, json )
*	Callback invoked upon receiving data from a Github API endpoint. Writes the data to `stdout`.
*
* @private
* @param {Object|Null} error - error object
* @param {Object[]} json - response data
*/
function onResponse( error, json ) {
	if ( error ) {
		console.error( error );
		return;
	}
	process.stdout.write( JSON.stringify( json ) );
}

/**
* FUNCTION: sigterm()
*	Callback invoked upon the process receiving a SIGTERM signal.
*
* @private
*/
function sigterm() {
	cleanup();
	setTimeout( onTimeout( SIGTERM ), WAIT );
}

/**
* FUNCTION: sigint()
*	Callback invoked upon the process receiving a SIGINT signal.
*
* @private
*/
function sigint() {
	cleanup();
	setTimeout( onTimeout( SIGINT ), WAIT );
}

/**
* FUNCTION: sighup()
*	Callback invoked upon the process receiving a SIGHUP signal.
*
* @private
*/
function sighup() {
	cleanup();
	setTimeout( onTimeout( SIGHUP ), WAIT );
}

/**
* FUNCTION: cleanup()
*	Performs any cleanup tasks before the process exits.
*
* @private
*/
function cleanup() {
	clearInterval( ID );
}

/**
* FUNCTION: onTimeout( code )
*	Encloses an exit code and returns a timeout callback.
*
* @private
* @param {Number} code - exit code
* @returns {Function} timeout callback
*/
function onTimeout( code ) {
	/**
	* FUNCTION: onTimeout()
	*	Callback invoked upon a timeout event. Exits the process.
	*
	* @private
	*/
	return function onTimeout() {
		process.exit( code );
	};
}


// INIT //

process.stdout.on( 'error', process.exit );


// ARGUMENTS //

var args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( require( './../package.json' ).version );
	return;
}


// REQUEST //

var token,
	keys,
	uri,
	len,
	key,
	qs,
	i;

opts = require( './defaults.json' );

// [0] Parse the URI and extract any query string parameters...
if ( args._.length ) {
	uri = args._[ 0 ];
} else {
	uri = args.uri;
}
uri = url.parse( uri, true );

qs = uri.query;
keys = Object.keys( qs );
len = keys.length;
for ( i = 0; i < len; i++ ) {
	key = keys[ i ];
	opts.qs[ key ] = qs[ key ];
}
opts.uri = uri;

// [1] Set the authorization token...
if ( args.token ) {
	token = args.token;
}
else if ( process.env.GITHUB_TOKEN ) {
	token = process.env.GITHUB_TOKEN;
}
if ( token ) {
	opts.headers.Authorization = 'token ' + token;
}
// [2] If a special media type has been provided, set the `Accept` header...
if ( args.accept ) {
	opts.headers.Accept = args.accept;
}
// [3] Option to query for all paginated results:
opts.all = args.all;

// [4] Option for polling the Github API...
if ( args.interval ) {
	opts.interval = parseFloat( args.interval );
}
// [5] Make the request(s):
ID = require( './../lib' )( opts, onResponse );

// [6] Only add signal listeners if we are polling a Github API endpoint...
if ( ID ) {
	process.on( 'SIGTERM', sigterm );
	process.on( 'SIGINT', sigint );
	process.on( 'SIGHUP', sighup );
}
